# app/jobs/health_alert_job.rb
require 'twilio-ruby'
require 'sendgrid-ruby'

class HealthAlertJob < ApplicationJob
  queue_as :urgent
  
  def perform(patient, analysis)
    send_sms_alert(patient, analysis)
    send_email_alert(patient, analysis)
    
    # Log notification
    patient.notification_logs.create!(
      notification_type: 'health_alert',
      channel: 'sms_and_email',
      content: build_alert_message(analysis),
      sent_at: Time.current
    )
  end
  
  private
  
  def send_sms_alert(patient, analysis)
    return unless patient.phone_number.present?
    
    client = Twilio::REST::Client.new(
      ENV['TWILIO_ACCOUNT_SID'],
      ENV['TWILIO_AUTH_TOKEN']
    )
    
    message = build_sms_message(analysis)
    
    client.messages.create(
      from: ENV['TWILIO_PHONE_NUMBER'],
      to: patient.phone_number,
      body: message
    )
  rescue => e
    Rails.logger.error "SMS Alert failed: #{e.message}"
  end
  
  def send_email_alert(patient, analysis)
    return unless patient.email.present?
    
    from = SendGrid::Email.new(email: 'alerts@healthid.app')
    to = SendGrid::Email.new(email: patient.email)
    subject = "Urgent Health Alert - #{analysis[:risk_assessment].upcase} Risk"
    
    content = SendGrid::Content.new(
      type: 'text/html',
      value: build_email_content(analysis)
    )
    
    mail = SendGrid::Mail.new(from, subject, to, content)
    
    sg = SendGrid::API.new(api_key: ENV['SENDGRID_API_KEY'])
    response = sg.client.mail._('send').post(request_body: mail.to_json)
    
    Rails.logger.info "Email sent with status: #{response.status_code}"
  rescue => e
    Rails.logger.error "Email Alert failed: #{e.message}"
  end
  
  def build_sms_message(analysis)
    risk = analysis[:risk_assessment] || 'UNKNOWN'
    anomaly = analysis[:anomaly_detection] || 'Health concern detected'
    recommendation = analysis[:recommendations]&.first || 'Check HealthID app'
    
    "HealthID ALERT (#{risk} Risk): #{anomaly.truncate(80)}. Action: #{recommendation.truncate(60)}. Check app for details."
  end
  
  def build_alert_message(analysis)
    {
      risk_level: analysis[:risk_assessment],
      anomaly: analysis[:anomaly_detection],
      recommendations: analysis[:recommendations],
      timestamp: Time.current
    }.to_json
  end
  
  def build_email_content(analysis)
    """
    <html>
      <body style='font-family: Arial, sans-serif; padding: 20px;'>
        <div style='background: #f44336; color: white; padding: 15px; border-radius: 5px;'>
          <h2>Health Alert - #{analysis[:risk_assessment]&.upcase} Risk</h2>
        </div>
        
        <div style='margin-top: 20px;'>
          <h3>What We Found:</h3>
          <p style='background: #fff3cd; padding: 15px; border-left: 4px solid #ffc107;'>
            #{analysis[:anomaly_detection]}
          </p>
        </div>
        
        <div style='margin-top: 20px;'>
          <h3>Immediate Actions Required:</h3>
          <ol>
            #{format_recommendations(analysis[:recommendations])}
          </ol>
        </div>
        
        <div style='margin-top: 20px;'>
          <h3>Follow-up Needed:</h3>
          <p>#{analysis[:follow_up]}</p>
        </div>
        
        <div style='margin-top: 30px; padding: 15px; background: #f5f5f5; border-radius: 5px;'>
          <p><strong>Access your HealthID wallet for complete analysis and historical data.</strong></p>
          <a href='#{ENV['APP_URL']}/dashboard' style='display: inline-block; padding: 10px 20px; background: #2196F3; color: white; text-decoration: none; border-radius: 5px;'>
            View Full Analysis
          </a>
        </div>
        
        <div style='margin-top: 30px; font-size: 12px; color: #666;'>
          <p>This alert was generated by HealthID's AI system using gpt-oss-20b for local, private analysis of your health data.</p>
          <p>Your data never leaves your control.</p>
        </div>
      </body>
    </html>
    """
  end
  
  def format_recommendations(recommendations)
    return '<li>Please check your HealthID app for recommendations</li>' if recommendations.blank?
    
    recommendations.map { |r| "<li>#{r}</li>" }.join("\n")
  end
end